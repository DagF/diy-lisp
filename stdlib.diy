;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))


(define and
    (lambda (a b)
        (if a (if b #t #f) #f)))

(define or
    (lambda (a b)
        (if a #t (if b #t #f))))

(define xor
    (lambda (a b)
        (if a (if b #f #t) (if b #t #f))))

(define >=
    (lambda (a b)
        (or (> a b) (eq a b))))

(define <=
    (lambda (a b)
        (or (< a b) (eq a b))))

(define <
    (lambda (a b)
        ( > b a)))

(define length
    (lambda (list)
        (if (empty list) 0 (+ 1 (length (tail list))))))

(define sum
    (lambda (list)
        (if
            (empty list)
            0
            (+
                (head list)
                (sum (tail list))))))

(define range
    (lambda (a b)
        ( if
            (< a b)
            (cons a
                (range
                    (+ 1 a)
                b))
            b)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.
